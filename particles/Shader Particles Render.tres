[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;
render_mode skip_vertex_transform;

// Godot manual about spatial shaders
// https://docs.godotengine.org/en/stable/tutorials/shaders/shader_reference/spatial_shader.html

uniform float size = 1.0;
varying vec2 uv;

mat3 lookAt(vec3 from, vec3 to)
{
  vec3 z = normalize(from - to);
  vec3 x = normalize(cross(z, vec3(0,1,0)));
  vec3 y = normalize(cross(x, z));
  return mat3(x,y,z);
}

void vertex()
{
	vec4 custom = INSTANCE_CUSTOM;
	
	// billboard (quad looking at camera)
	vec3 world = (WORLD_MATRIX * vec4(0,0,0,1)).xyz;
    mat4 look = mat4(lookAt(world, CAMERA_MATRIX[3].xyz));
	mat4 stack = INV_CAMERA_MATRIX * WORLD_MATRIX * look;
	float scale = size * (1.-custom.w);//abs(sin(custom.w*3.14));
	VERTEX = (stack * vec4(scale * VERTEX, 1.0)).xyz;
    NORMAL = normalize((MODELVIEW_MATRIX * vec4(0,0,1,0)).xyz);
	uv = UV*2.-1.;
	uv.y *= -1.;
}

void fragment()
{
	float dist = length(uv);
	
	// circle crop
	if (dist>1.) discard;
	
	// color
	ALBEDO = vec3(.5);
	
	// normal of sphere impostor
	NORMAL = normalize(vec3(uv, 1.-(dist*dist)));
}"
